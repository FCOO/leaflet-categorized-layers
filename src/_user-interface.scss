/*********************************************************************
_USER-INTERFACE.SCSS
Contains the common scss declarations, variable and functions used by FCOO
***********************************************************************/
//Colors - prefixed with color-
$color-gray0 : rgba(246, 246, 246, 1);
$color-gray1 : rgba(236, 236, 236, 1);
$color-gray2 : rgba(226, 226, 226, 1);
$color-gray3 : rgba(216, 216, 216, 1);
$color-gray4 : rgba(206, 206, 206, 1);
$color-gray5 : rgba(196, 196, 196, 1);
$color-gray6 : rgba(186, 186, 186, 1);
$color-gray7 : rgba(176, 176, 176, 1);
$color-gray8 : rgba(166, 166, 166, 1);
$color-gray9 : rgba(156, 156, 156, 1);
$color-gray10: rgba(146, 146, 146, 1);
$color-gray11: rgba(136, 136, 136, 1);


$color-black0: rgba(  0,   0,   0, 1);
$color-black1: rgba( 20,  20,  20, 1);
$color-black2: rgba( 40,  40,  40, 1);
$color-black3: rgba( 60,  60,  60, 1);
$color-black4: rgba( 80,  80,  80, 1);
$color-black5: rgba(100, 100, 100, 1);
$color-black6: rgba(120, 120, 120, 1);

//Background-color for header, popup windowbox etc
$background-color : $color-gray1; 

//Colors for the header
$color-header-open  : $color-gray3;
$color-header-fixed : $color-gray5; //Color for header and left-side when fixed
$color-header-border: black;

$background-color-normal : $color-gray0;  
$background-color-info   : #DBE3FF;  
$background-color-success: #ECFAE3;
$background-color-warning: #FFFBCC; 
$background-color-error  : #FFD7D7; 

$text-color-error		: #A94442; 
$text-color-success	: #3c763d; 


//$color-darkbrown: #32373d;

//Background-color for selected element
$background-color-selected: #d9edf7; //Boottraps

//$background-color-selected: #3399FF; //Firefox
//$background-color-selected: #26A0DA; //IE
//$color-selected						: #DDDDDD; //white - NOT USED; 

$background-color-hover					: $color-gray6;
$background-color-selected-hover:  darken($background-color-selected, 15%);

//Default border-width, -radius and padding for boxes
$border-size					: rem(1px);
$border-radius				: rem(6px);
$button-border-radius	: rem(3px);
$padding							: $border-radius/2;
$padding-top					: $padding + rem(1px); //To make space for inner shadow at the top

$margin       : rem(2px);

//Default font-size for boxes and input
$font-size-text-small	: rem(12.5px);
$font-size-text				: rem(14px);
$font-size-text-big		: rem(20px); //rem(24px);

$font-size-header			: rem(18px);
$font-size-input			: rem(14px);

$font-size-icon				: rem(12px);

//Default box-height - when box-sizing = border-box
$default-box-height: $border-size + $padding-top + $font-size-text + $padding + $border-size;
  

//Dimentions of icon-buttons - when box-sizing = border-box
$button-icon-big-dim    : $font-size-text-big + 2*1.5*$padding + 2*$border-size;
$button-icon-normal-dim : $default-box-height;

$button-active-background-color		: $color-gray3;
$button-selected-background-color	: $color-gray5; 


//Dimentions of the header
$header-height     : $button-icon-big-dim + 2*$margin; 
$header-left-width : rem(220px);
$header-right-width: rem(200px);

$header-border-size      : rem(1px);
$header-border           : $header-border-size solid $color-header-border;  
$header-inner-border     : $header-border-size solid $color-gray4;  
$header-invincible-border: $header-border-size solid $background-color;


//Height and font-size of menu-items in verticalMenu.scss
$menu-item-height: rem(30px);
$menu-font-size  : rem(13px);

//Default height and width of radio- and checkbox-input
$input-checkbox-dim: rem(13px);


//Font-size and dim of x-marker used as close-button for windowboxes and opoup windows etc
$close-button-font-size: rem(16px);
$close-button-dim      : $close-button-font-size;// + rem(0px); 

//Shadows for buttons and action-menus etc.
$shadow-inside             : rem(0px) rem(2px) rem(1px) white inset;
$shadow-inside-and-outside : $shadow-inside, rem(0px) (-1*rem(2px)) rem(8px) white, rem(0px) rem(2px) rem(5px) rgba(0, 0, 0, 0.1), rem(0px) rem(8px) rem(10px) rgba(0, 0, 0, 0.1);

$shadow-hover	             : rem(0px) rem(2px) rem(1px) white inset, 0px (-1*rem(2px)) (10*rem(2px)) white, rem(0px) rem(2px) rem(5px) rgba(0, 0, 0, 0.1), rem(0px) rem(8px) rem(10px) rgba(0, 0, 0, 0.1);
$shadow-active             : rem(0px) rem(1px) rem(2px) rgba(0, 0, 0, 0.5) inset, rem(0px) (-1*rem(2px)) (10*rem(2px)) white, rem(0px) rem(1px) rem(5px) rgba(0, 0, 0, 0.1), rem(0px) rem(2px) rem(10px) rgba(0, 0, 0, 0.1);


//Shadow for info-box and input-field 
$input-border-focus				:	#66afe9 !default; //Copyed from bootstrap: http://http://getbootstrap.com/css/
$input-border-focus-error	:	#843534 !default; //Copyed from bootstrap: http://http://getbootstrap.com/css/

//'Gray' shadow inside the box
$shadow-box-inside	:	inset 0px rem(1px) rem(1px) 0 rgba(0,0,0,.5); 
											
//'Blue' or 'red' shadow outside the box. Modified version of  bootstrap: http://http://getbootstrap.com/css/
$shadow-box-focus				: inset 0 rem(1px) rem(1px) rgba(0,0,0,.075), 0 0 rem(8px) rgba(red($input-border-focus), green($input-border-focus), blue($input-border-focus), .6);
$shadow-box-focus-error	: 0 rem(1px) rem(1px) rgba(0, 0, 0, 0.075) inset, 0 0 rem(6px) #ce8483;


/***********************************************
Common mixin and function
***********************************************/

@mixin background-opacity($color, $opacity: 0.3) {
	background: $color; /* The Fallback */
	background: rgba($color, $opacity);
}

//mixin to create shadow and class to hide shadow
@mixin box-shadow($size : 100%){
	$shadow-size1: 2*$border-size*$size/100%; 
	$shadow-size2: rem(9*$size/100%);
	box-shadow: $shadow-size1 1.5*$shadow-size1 $shadow-size1 0 rgba(0,0,0,.73), $shadow-size2 1.5*$shadow-size2 $shadow-size2 0 rgba(0,0,0,.13);
}

//mixin to create shadow and class to hide shadow
@mixin box-shadow-inside-left($size : 100%){
	$shadow-size1: 2*$border-size*$size/100%; 
	$shadow-size2: rem(9*$size/100%);
	box-shadow: inset $shadow-size1 0 $shadow-size1 0 rgba(0,0,0,.73), inset $shadow-size2 0 $shadow-size2 0 rgba(0,0,0,.13);
}

//mixin to border and inner shadow for info/input-box
@mixin content-box-shadow(){
	border			: $border-size solid $color-gray9; 
	border-radius: $padding;
	box-shadow	: $shadow-box-inside;
	padding-top	: $padding-top;
}

//mixin to make cursor:pointer/hand
@mixin  cursor-hand(){
	cursor: pointer !important;
	cursor: hand !important;
}

//mixin to clear float eq. in <div> with a float:left and float:right child
@mixin clearfix {
  &:after {
    content	: "";
    display	: table;
    clear		: both;
  }
}

//mixin to create translate3d
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

//mixin to create transition-transform
@mixin transition-transform($transition...) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}

//minin to create text-shadow on :hover 
@mixin text-shadow-hover( $color: black, $use-shade: false ){
	@if $use-shade {
		text-shadow: 0px rem(1) 0px shade($color, 40%);
	} 
	@else {
		text-shadow: 0px rem(1) 0px tint($color, 40%);
	}
}


/******************************************
Functions to work with lists
eq. $list = name1 value1, name2, value2, name3, value3;
**********************************************/


/*******************************************************
get-list-value returns the value cooresponding to
$key in $list
E.q.: `get-list-value($list, name2)` will return value2
*********************************************************/
@function get-list-value($list, $key) {
  @each $item in $list {
    @if ($key == nth($item, 1)) {
      @return nth($item, 2);
    }
  }
  @return false;
}

/*************************************************************
*************************************************************
COLOR
The color-name are the same as used in leaflet.js and by
L.AwesomeMarkers etc.
*************************************************************
*************************************************************/
// Creating a SASS list with all colors used
$colors: 
	"red"					#ff0000,	"darkred"			#8b0000,	"lightred"		#FF8E7F,	"orange"			#ffa500,
	"beige"				#f5f5dc,	"green"				#008000,	"darkgreen"		#006400,	"lightgreen"	#90ee90,
	"blue"				#0000ff,	"darkblue"		#00008b,	"lightblue"		#add8e6,	"cadetblue"		#5f9ea0,
	"purple"			#800080,	"darkpurple"	#5B396B,	"pink"				/*#fc0cb,*/ #FF91EA,
	"white"				#ffffff,	"gray"				#808080,	"lightgray"		#D3D3D3,
	"black"				#000000
;

// get-color returns the hex-code for the color named $color-name
@function get-color($color-name) {
  @return get-list-value($colors, $color-name);
}


/*************************************************************
*************************************************************
COLOR CONTRACT
Taken from http://codepen.io/lunelson/pen/jENxwB
*************************************************************
*************************************************************/
$dark-text-default: #000 !default;
$light-text-default: #fff !default;

// LINEAR to LOGARITHMIC and vicev-ersa
@function lin2log($n) { @if $n <= 0.0031308 { @return $n * 12.92; } @else { @return 1.055 * pow($n,1/2.4) - 0.055; } }
@function log2lin($n) { @if $n <= 0.04045 { @return $n / 12.92; } @else { @return pow((($n + 0.055)/1.055),2.4); } }

// sRGB BT-709 BRIGHTNESS
@function brightness($c) {
	$rlin: log2lin(red($c)/255);
	$glin: log2lin(green($c)/255);
	$blin: log2lin(blue($c)/255);
	@return lin2log(0.2126 * $rlin + 0.7152 * $glin + 0.0722 * $blin) * 100;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $dark-text-default, $light: $light-text-default) {
  @if $color == null {
    @return null;
  }
  @else {
    $color-brightness: brightness($color);  
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);
    
    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);  
  }
}


/*************************************************************
*************************************************************
ICONS
To use the mixins regarding icons, the scss-file MUST provide 
a list named "$icon-list" where each row has a icon-name and a char-code
Eq.:
	$icon-list: 
		ok			"\ed6c",	
		cancel	"\ed6a",	
		close		"\ed6b"	
	;

and (optional) the name of the font-family:
 $icon-font-family: 'icomoon';

and the @font-face (perhaps generated via bourbon "@include font-face(icomoon, 'icomoon-1.5.1/icomoon');"
	@font-face {
		font-family: icomoon;
	  src: url("icomoon-1.5.1/icomoon.eot?#iefix") format("embedded-opentype"), url("icomoon-1.5.1/icomoon.woff2") format("woff2"), url("icomoon-1.5.1/icomoon.woff") format("woff"), url("icomoon-1.5.1/icomoon.ttf") format("truetype"), url("icomoon-1.5.1/icomoon.svg#icomoon") format("svg");
	}

*************************************************************
*************************************************************/

//Fallback
$icon-list				: icon-name		"\e123";	
$icon-font-family	: 'icomoon';



// get-icon returns the code for the icon named $icon-name
@function get-icon($icon-name) {
  @return get-list-value($icon-list, $icon-name);
}

//The base for all icon-classes
%icon-font-base {
  font-family		: icomoon;
	font-size			: $font-size-icon;
	speak					: none;
  font-variant	: normal;
  font-style		: normal;
  font-weight		: normal;
  text-transform: none;
  line-height		: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

	speak: none;
  display: inline-block;
	text-decoration: inherit;
  text-align: center;

}


// Returns the character code for the requested icon
@mixin content-icon($icon-name) {
  $char-code: get-icon($icon-name);
  content: "#{$char-code}";
}

// Returns the character code for the requested icon
@mixin icon($icon-name) {
  @extend %icon-font-base;
	@include content-icon($icon-name);
}


// Adds the specified icon to the specified pseudo class
@mixin inline-icon($icon: '', $font-size: nil, $cursor-hand: nil, $color: inherit, $pseudo: before) {
  &:#{$pseudo} {
    @include icon($icon);
    @if $font-size		{ font-size: $font-size;	}
    @if $cursor-hand	{ @include cursor-hand(); }
    color: $color;
  }
}

